{"ast":null,"code":"export class Cell {\n  constructor(board, x, y, color, figure) {\n    this.x = void 0;\n    this.y = void 0;\n    this.color = void 0;\n    this.figure = void 0;\n    this.board = void 0;\n    this.available = void 0;\n    this.id = void 0;\n    this.x = x;\n    this.y = y;\n    this.color = color;\n    this.figure = figure;\n    this.board = board;\n    this.available = false;\n    this.id = Math.random();\n  }\n  isEmptyVertical(target) {\n    if (this.x !== target.x) {\n      return false;\n    }\n    const min = Math.min(this.y, target.y);\n    const max = Math.max(this.y, target.y);\n  }\n  isEmptyHorizontal(target) {\n    return true;\n  }\n  isEmptyDiagonal(target) {\n    return true;\n  }\n  moveFigure(target) {\n    var _this$figure;\n    if (this.figure && (_this$figure = this.figure) !== null && _this$figure !== void 0 && _this$figure.canMove(target)) {\n      this.figure.moveFigure(target);\n      target.figure = this.figure;\n      this.figure = null;\n    }\n  }\n}","map":{"version":3,"names":["Cell","constructor","board","x","y","color","figure","available","id","Math","random","isEmptyVertical","target","min","max","isEmptyHorizontal","isEmptyDiagonal","moveFigure","_this$figure","canMove"],"sources":["/home/liza/Рабочий стол/chess-game/chess-app/src/models/Cell.ts"],"sourcesContent":["import { Colors } from \"./Colors\";\nimport { Figure } from \"./figures/Figure\";\nimport { Board } from \"./Board\";\n\nexport class Cell {\n\n    readonly x: number;\n    readonly y: number;\n    readonly color: Colors;\n    figure: Figure | null;\n    board: Board;\n    available: boolean;\n    id: number;\n\n    constructor(board: Board, x: number, y: number, color: Colors, figure: Figure | null) {\n        this.x = x;\n        this.y = y;\n        this.color = color;\n        this.figure = figure;\n        this.board = board;\n        this.available = false;\n        this.id = Math.random()\n    }\n\n    isEmptyVertical(target: Call): boolean {\n        if(this.x !== target.x) {\n            return false;\n        }\n\n        const min = Math.min(this.y, target.y)\n        const max = Math.max(this.y, target.y)\n    }\n\n    isEmptyHorizontal(target: Call): boolean {\n        return true;\n    }\n    \n    isEmptyDiagonal(target: Call): boolean {\n        return true;\n    }\n\n    moveFigure(target: Cell) {\n        if(this.figure && this.figure?.canMove(target)){\n            this.figure.moveFigure(target)\n            target.figure = this.figure;\n            this.figure = null;\n        }\n    }\n}"],"mappings":"AAIA,OAAO,MAAMA,IAAI,CAAC;EAUdC,WAAWA,CAACC,KAAY,EAAEC,CAAS,EAAEC,CAAS,EAAEC,KAAa,EAAEC,MAAqB,EAAE;IAAA,KAR7EH,CAAC;IAAA,KACDC,CAAC;IAAA,KACDC,KAAK;IAAA,KACdC,MAAM;IAAA,KACNJ,KAAK;IAAA,KACLK,SAAS;IAAA,KACTC,EAAE;IAGE,IAAI,CAACL,CAAC,GAAGA,CAAC;IACV,IAAI,CAACC,CAAC,GAAGA,CAAC;IACV,IAAI,CAACC,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACJ,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACK,SAAS,GAAG,KAAK;IACtB,IAAI,CAACC,EAAE,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC;EAC3B;EAEAC,eAAeA,CAACC,MAAY,EAAW;IACnC,IAAG,IAAI,CAACT,CAAC,KAAKS,MAAM,CAACT,CAAC,EAAE;MACpB,OAAO,KAAK;IAChB;IAEA,MAAMU,GAAG,GAAGJ,IAAI,CAACI,GAAG,CAAC,IAAI,CAACT,CAAC,EAAEQ,MAAM,CAACR,CAAC,CAAC;IACtC,MAAMU,GAAG,GAAGL,IAAI,CAACK,GAAG,CAAC,IAAI,CAACV,CAAC,EAAEQ,MAAM,CAACR,CAAC,CAAC;EAC1C;EAEAW,iBAAiBA,CAACH,MAAY,EAAW;IACrC,OAAO,IAAI;EACf;EAEAI,eAAeA,CAACJ,MAAY,EAAW;IACnC,OAAO,IAAI;EACf;EAEAK,UAAUA,CAACL,MAAY,EAAE;IAAA,IAAAM,YAAA;IACrB,IAAG,IAAI,CAACZ,MAAM,KAAAY,YAAA,GAAI,IAAI,CAACZ,MAAM,cAAAY,YAAA,eAAXA,YAAA,CAAaC,OAAO,CAACP,MAAM,CAAC,EAAC;MAC3C,IAAI,CAACN,MAAM,CAACW,UAAU,CAACL,MAAM,CAAC;MAC9BA,MAAM,CAACN,MAAM,GAAG,IAAI,CAACA,MAAM;MAC3B,IAAI,CAACA,MAAM,GAAG,IAAI;IACtB;EACJ;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}