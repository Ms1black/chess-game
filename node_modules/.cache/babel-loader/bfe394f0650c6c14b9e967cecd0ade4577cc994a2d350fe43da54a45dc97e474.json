{"ast":null,"code":"import { Cell } from './Cell';\nimport { Colors } from \"./Colors\";\nimport { Queen } from './figures/Queen';\nimport { Pawn } from './figures/Pawn';\nimport { King } from './figures/King';\nimport { Bishop } from './figures/Bishop';\nimport { Knight } from './figures/Knight';\nimport { Rook } from './figures/Rook';\nexport class Board {\n  constructor() {\n    this.cells = [];\n  }\n  initCells() {\n    for (let i = 0; i < 8; i++) {\n      const row = [];\n      for (let j = 0; j < 8; j++) {\n        if ((i + j) % 2 == 0) {\n          row.push(new Cell(this, j, i, Colors.BLACK, null));\n        } else {\n          row.push(new Cell(this, j, i, Colors.WHITE, null));\n        }\n      }\n      this.cells.push(row);\n    }\n  }\n  getCell(x, y) {\n    return this.cells[y][x];\n  }\n  addPawns() {\n    for (let i = 0; i < 8; i++) {\n      new Pawn(Colors.BLACK, this.getCell(i, 1));\n      new Pawn(Colors.WHITE, this.getCell(i, 6));\n    }\n  }\n  addKings() {\n    new King(Colors.BLACK, this.getCell(4, 0));\n    new King(Colors.WHITE, this.getCell(4, 7));\n  }\n  addBishops() {\n    new Bishop(Colors.BLACK, this.getCell(2, 0));\n    new Bishop(Colors.BLACK, this.getCell(5, 0));\n    new Bishop(Colors.WHITE, this.getCell(2, 7));\n    new Bishop(Colors.WHITE, this.getCell(5, 7));\n  }\n  addKnights() {\n    new Knight(Colors.BLACK, this.getCell(1, 0));\n    new Knight(Colors.BLACK, this.getCell(6, 0));\n    new Knight(Colors.WHITE, this.getCell(1, 7));\n    new Knight(Colors.WHITE, this.getCell(6, 7));\n  }\n  addRooks() {\n    new Rook(Colors.BLACK, this.getCell(0, 0));\n    new Rook(Colors.BLACK, this.getCell(7, 0));\n    new Rook(Colors.WHITE, this.getCell(0, 7));\n    new Rook(Colors.WHITE, this.getCell(7, 7));\n  }\n  addQueens() {\n    new Queen(Colors.BLACK, this.getCell(3, 0));\n    new Queen(Colors.WHITE, this.getCell(3, 7));\n  }\n  addFigures() {\n    this.addPawns();\n    this.addBishops();\n    this.addKings();\n    this.addKnights();\n    this.addRooks();\n    this.addQueens();\n  }\n}","map":{"version":3,"names":["Cell","Colors","Queen","Pawn","King","Bishop","Knight","Rook","Board","constructor","cells","initCells","i","row","j","push","BLACK","WHITE","getCell","x","y","addPawns","addKings","addBishops","addKnights","addRooks","addQueens","addFigures"],"sources":["/home/liza/Рабочий стол/chess-game/chess-app/src/models/Board.ts"],"sourcesContent":["import { Cell } from './Cell';\nimport { Figure } from './figures/Figure';\nimport { Colors } from \"./Colors\";\nimport { Queen } from './figures/Queen';\nimport { Pawn } from './figures/Pawn';\nimport { King } from './figures/King';\nimport { Bishop } from './figures/Bishop';\nimport { Knight } from './figures/Knight';\nimport { Rook } from './figures/Rook';\n\nexport class Board {\n\n    cells: Cell[][] = []\n\n\n    public initCells() {\n        for (let i=0; i < 8; i++){\n            const row: Cell[] = []\n            for (let j = 0; j < 8; j++) {\n                if ((i + j) % 2 ! == 0) {\n                    row.push(new Cell(this, j, i, Colors.BLACK, null))\n                } else {\n                    row.push(new Cell(this, j, i, Colors.WHITE, null))\n                }\n            }\n            this.cells.push(row);\n        }\n    }\n\n    public getCell(x: number, y: number) {\n        return this.cells[y][x]\n    }\n\n    private addPawns(){\n        for (let i = 0; i < 8; i++) {\n            new Pawn(Colors.BLACK, this.getCell(i, 1))\n            new Pawn(Colors.WHITE, this.getCell(i, 6))\n            \n        }\n    }\n\n    private addKings(){\n        new King(Colors.BLACK, this.getCell(4, 0))\n        new King(Colors.WHITE, this.getCell(4, 7))\n    }\n\n    private addBishops() {\n        new Bishop(Colors.BLACK, this.getCell(2, 0))\n        new Bishop(Colors.BLACK, this.getCell(5, 0))\n        new Bishop(Colors.WHITE, this.getCell(2, 7))\n        new Bishop(Colors.WHITE, this.getCell(5, 7))\n    }\n\n    private addKnights() {\n        new Knight(Colors.BLACK, this.getCell(1, 0))\n        new Knight(Colors.BLACK, this.getCell(6, 0))\n        new Knight(Colors.WHITE, this.getCell(1, 7))\n        new Knight(Colors.WHITE, this.getCell(6, 7))\n    }\n    private addRooks(){\n        new Rook(Colors.BLACK, this.getCell(0, 0))\n        new Rook(Colors.BLACK, this.getCell(7, 0))\n        new Rook(Colors.WHITE, this.getCell(0, 7))\n        new Rook(Colors.WHITE, this.getCell(7, 7))\n    }\n\n    private addQueens(){\n        new Queen(Colors.BLACK, this.getCell(3, 0))\n        new Queen(Colors.WHITE, this.getCell(3, 7))\n    }\n\n    \n\n    public addFigures() {\n        this.addPawns()\n        this.addBishops()\n        this.addKings()\n        this.addKnights()\n        this.addRooks()\n        this.addQueens()\n    }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}