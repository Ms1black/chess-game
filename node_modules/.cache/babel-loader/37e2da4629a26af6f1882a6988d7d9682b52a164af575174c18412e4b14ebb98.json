{"ast":null,"code":"var _jsxFileName = \"/home/liza/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/chess-game/chess-app/src/components/BoardComponent.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport CellComponent from './CellComponent';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BoardComponent = ({\n  board,\n  setBoard\n}) => {\n  _s();\n  const [selectedCell, setSelectedCell] = useState(null);\n  function click(cell) {\n    var _selectedCell$figure;\n    if (selectedCell && selectedCell !== cell && (_selectedCell$figure = selectedCell.figure) !== null && _selectedCell$figure !== void 0 && _selectedCell$figure.canMove(cell)) {\n      selectedCell.moveFigure(cell);\n      setSelectedCell(null);\n      updateBoard();\n    } else {\n      setSelectedCell(cell);\n    }\n  }\n  useEffect(() => {\n    highlightCells();\n  }, [selectedCell]);\n  function highlightCells() {\n    board.highlightCells(selectedCell);\n    updateBoard();\n  }\n  function updateBoard() {\n    const newBoard = board.getCopyBoard();\n    setBoard(newBoard);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: board.cells.map((row, index) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: row.map(cell => /*#__PURE__*/_jsxDEV(CellComponent, {\n        click: click,\n        cell: cell,\n        selected: cell.x === (selectedCell === null || selectedCell === void 0 ? void 0 : selectedCell.x) && cell.y === (selectedCell === null || selectedCell === void 0 ? void 0 : selectedCell.y)\n      }, cell.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 25\n      }, this))\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n};\n_s(BoardComponent, \"OFVjm5mk704+5WCzFQLJg89Ag6Q=\");\n_c = BoardComponent;\nexport default BoardComponent;\nvar _c;\n$RefreshReg$(_c, \"BoardComponent\");","map":{"version":3,"names":["React","useEffect","useState","CellComponent","jsxDEV","_jsxDEV","BoardComponent","board","setBoard","_s","selectedCell","setSelectedCell","click","cell","_selectedCell$figure","figure","canMove","moveFigure","updateBoard","highlightCells","newBoard","getCopyBoard","className","children","cells","map","row","index","Fragment","selected","x","y","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/liza/Рабочий стол/chess-game/chess-app/src/components/BoardComponent.tsx"],"sourcesContent":["import React, {FC,useEffect, useState} from 'react'\nimport { Board } from \"../models/Board\";\nimport CellComponent from './CellComponent';\nimport { Cell } from '../models/Cell';\n\ninterface BoardProps {\n    board: Board;\n    setBoard: (board: Board) => void;\n}\n\nconst BoardComponent: FC<BoardProps> = ({board, setBoard}) =>{\n    const [selectedCell, setSelectedCell] = useState<Cell | null>(null);\n\n    function click(cell:Cell) {\n        if(selectedCell && selectedCell !== cell  && selectedCell.figure?.canMove(cell)){\n            selectedCell.moveFigure(cell);\n            setSelectedCell(null);\n            updateBoard()\n        } else {\n            setSelectedCell(cell);\n        }\n    }\n\n    useEffect (() => {\n        highlightCells()\n    }, [selectedCell])\n\n    function highlightCells() {\n        board.highlightCells(selectedCell)\n        updateBoard()\n    }\n    \n    function updateBoard() {\n        const newBoard = board.getCopyBoard()\n        setBoard(newBoard)\n    }\n\n    return (\n        <div className='board'>\n            {board.cells.map((row, index) => \n                <React.Fragment key={index}>\n                    {row.map(cell =>\n                        <CellComponent\n                            click = {click}\n                            cell = {cell}\n                            key = {cell.id}\n                            selected = {cell.x === selectedCell?.x && cell.y === selectedCell?.y}\n                        />\n                    )}\n                </React.Fragment>\n            )}\n        </div>\n    )\n}\n\nexport default BoardComponent"],"mappings":";;AAAA,OAAOA,KAAK,IAAMC,SAAS,EAAEC,QAAQ,QAAO,OAAO;AAEnD,OAAOC,aAAa,MAAM,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAQ5C,MAAMC,cAA8B,GAAGA,CAAC;EAACC,KAAK;EAAEC;AAAQ,CAAC,KAAI;EAAAC,EAAA;EACzD,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGT,QAAQ,CAAc,IAAI,CAAC;EAEnE,SAASU,KAAKA,CAACC,IAAS,EAAE;IAAA,IAAAC,oBAAA;IACtB,IAAGJ,YAAY,IAAIA,YAAY,KAAKG,IAAI,KAAAC,oBAAA,GAAKJ,YAAY,CAACK,MAAM,cAAAD,oBAAA,eAAnBA,oBAAA,CAAqBE,OAAO,CAACH,IAAI,CAAC,EAAC;MAC5EH,YAAY,CAACO,UAAU,CAACJ,IAAI,CAAC;MAC7BF,eAAe,CAAC,IAAI,CAAC;MACrBO,WAAW,CAAC,CAAC;IACjB,CAAC,MAAM;MACHP,eAAe,CAACE,IAAI,CAAC;IACzB;EACJ;EAEAZ,SAAS,CAAE,MAAM;IACbkB,cAAc,CAAC,CAAC;EACpB,CAAC,EAAE,CAACT,YAAY,CAAC,CAAC;EAElB,SAASS,cAAcA,CAAA,EAAG;IACtBZ,KAAK,CAACY,cAAc,CAACT,YAAY,CAAC;IAClCQ,WAAW,CAAC,CAAC;EACjB;EAEA,SAASA,WAAWA,CAAA,EAAG;IACnB,MAAME,QAAQ,GAAGb,KAAK,CAACc,YAAY,CAAC,CAAC;IACrCb,QAAQ,CAACY,QAAQ,CAAC;EACtB;EAEA,oBACIf,OAAA;IAAKiB,SAAS,EAAC,OAAO;IAAAC,QAAA,EACjBhB,KAAK,CAACiB,KAAK,CAACC,GAAG,CAAC,CAACC,GAAG,EAAEC,KAAK,kBACxBtB,OAAA,CAACL,KAAK,CAAC4B,QAAQ;MAAAL,QAAA,EACVG,GAAG,CAACD,GAAG,CAACZ,IAAI,iBACTR,OAAA,CAACF,aAAa;QACVS,KAAK,EAAIA,KAAM;QACfC,IAAI,EAAIA,IAAK;QAEbgB,QAAQ,EAAIhB,IAAI,CAACiB,CAAC,MAAKpB,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEoB,CAAC,KAAIjB,IAAI,CAACkB,CAAC,MAAKrB,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEqB,CAAC;MAAC,GAD9DlB,IAAI,CAACmB,EAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEjB,CACL;IAAC,GARgBT,KAAK;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OASV,CACpB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd,CAAC;AAAA3B,EAAA,CA3CKH,cAA8B;AAAA+B,EAAA,GAA9B/B,cAA8B;AA6CpC,eAAeA,cAAc;AAAA,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}