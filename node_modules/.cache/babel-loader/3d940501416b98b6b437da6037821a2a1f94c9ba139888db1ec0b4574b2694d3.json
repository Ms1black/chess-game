{"ast":null,"code":"export class Cell {\n  constructor(board, x, y, color, figure) {\n    this.x = void 0;\n    this.y = void 0;\n    this.color = void 0;\n    this.figure = void 0;\n    this.board = void 0;\n    this.available = void 0;\n    this.id = void 0;\n    this.x = x;\n    this.y = y;\n    this.color = color;\n    this.figure = figure;\n    this.board = board;\n    this.available = false;\n    this.id = Math.random();\n  }\n  isEmpty() {\n    return this.figure === null;\n  }\n  isEmptyVertical(target) {\n    if (this.x !== target.x) {\n      return false;\n    }\n    const min = Math.min(this.y, target.y);\n    const max = Math.max(this.y, target.y);\n    for (let y = min + 1; y < max; y++) {\n      if (!this.board.getCell(this.x, y).isEmpty()) {\n        return false;\n      }\n    }\n    return true;\n  }\n  isEmptyHorizontal(target) {\n    if (this.y !== target.y) {\n      return false;\n    }\n    const min = Math.min(this.x, target.x);\n    const max = Math.max(this.x, target.x);\n    for (let x = min + 1; x < max; x++) {\n      if (!this.board.getCell(x, this.y).isEmpty()) {\n        return false;\n      }\n    }\n    return true;\n  }\n  isEmptyDiagonal(target) {\n    const absX = Math.abs(target.x - this.y);\n    const absY = Math.abs(target.y - this.y);\n    if (absY !== absX) return false;\n    const dy = this.y < target.y ? 1 : -1;\n    const dx = this.x < target.x ? 1 : -1;\n    for (let i = 1; i < absY; i++) {\n      if (!this.board.getCell(this.x + dx * i, this.y + dy * i).isEmpty()) return false;\n    }\n    return true;\n  }\n  setFigure(figure) {\n    this.figure = figure;\n    this.figure.cell = this;\n  }\n  moveFigure(target) {\n    var _this$figure;\n    if (this.figure && (_this$figure = this.figure) !== null && _this$figure !== void 0 && _this$figure.canMove(target)) {\n      this.figure.moveFigure(target);\n      target.setFigure(this.figure);\n      this.figure = null;\n    }\n  }\n}","map":{"version":3,"names":["Cell","constructor","board","x","y","color","figure","available","id","Math","random","isEmpty","isEmptyVertical","target","min","max","getCell","isEmptyHorizontal","isEmptyDiagonal","absX","abs","absY","dy","dx","i","setFigure","cell","moveFigure","_this$figure","canMove"],"sources":["/home/liza/Рабочий стол/chess-game/chess-app/src/models/Cell.ts"],"sourcesContent":["import { Colors } from \"./Colors\";\nimport { Figure } from \"./figures/Figure\";\nimport { Board } from \"./Board\";\n\nexport class Cell {\n\n    readonly x: number;\n    readonly y: number;\n    readonly color: Colors;\n    figure: Figure | null;\n    board: Board;\n    available: boolean;\n    id: number;\n\n    constructor(board: Board, x: number, y: number, color: Colors, figure: Figure | null) {\n        this.x = x;\n        this.y = y;\n        this.color = color;\n        this.figure = figure;\n        this.board = board;\n        this.available = false;\n        this.id = Math.random()\n    }\n\n    isEmpty(){\n        return this.figure === null;\n    }\n\n    isEmptyVertical(target: Cell): boolean {\n        if(this.x !== target.x) {\n            return false;\n        }\n\n        const min = Math.min(this.y, target.y);\n        const max = Math.max(this.y, target.y);\n        for (let y = min+1; y < max; y++) {\n            if(!this.board.getCell(this.x, y).isEmpty()) {\n                return false\n            }\n        }\n        return true;\n    }\n\n    isEmptyHorizontal(target: Cell): boolean {\n        if(this.y !== target.y) {\n            return false;\n        }\n\n        const min = Math.min(this.x, target.x);\n        const max = Math.max(this.x, target.x);\n        for (let x = min+1; x < max; x++) {\n            if(!this.board.getCell(x, this.y).isEmpty()) {\n                return false\n            }\n        }\n        return true;\n    }\n    \n    isEmptyDiagonal(target: Cell): boolean {\n        const absX = Math.abs(target.x - this.y);\n        const absY = Math.abs(target.y - this.y);\n        if(absY !== absX)\n            return false;\n\n        const dy = this.y < target.y ? 1 : -1\n        const dx = this.x < target.x ? 1 : -1\n\n        for (let i = 1; i < absY; i++) {\n            if(!this.board.getCell(this.x + dx * i, this.y + dy * i).isEmpty())\n            return false;\n        }\n        return true;\n    }\n\n    setFigure(figure: Figure){\n        this.figure = figure;\n        this.figure.cell = this;\n    }\n\n    moveFigure(target: Cell) {\n        if(this.figure && this.figure?.canMove(target)){\n            this.figure.moveFigure(target)\n            target.setFigure(this.figure);\n            this.figure = null;\n        }\n    }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}