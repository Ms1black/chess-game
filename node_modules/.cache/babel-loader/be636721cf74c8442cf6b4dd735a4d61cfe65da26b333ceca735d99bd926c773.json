{"ast":null,"code":"export class Cell {\n  constructor(board, x, y, color, figure) {\n    this.x = void 0;\n    this.y = void 0;\n    this.color = void 0;\n    this.figure = void 0;\n    this.board = void 0;\n    this.available = void 0;\n    this.id = void 0;\n    this.x = x;\n    this.y = y;\n    this.color = color;\n    this.figure = figure;\n    this.board = board;\n    this.available = false;\n    this.id = Math.random();\n  }\n  isEmpty() {\n    return this.figure === null;\n  }\n  isEnemy(target) {\n    if (target.figure) {\n      var _this$figure;\n      return ((_this$figure = this.figure) === null || _this$figure === void 0 ? void 0 : _this$figure.color) !== target.figure.color;\n    }\n    return false;\n  }\n  isEmptyVertical(target) {\n    if (this.x !== target.x) {\n      return false;\n    }\n    const min = Math.min(this.y, target.y);\n    const max = Math.max(this.y, target.y);\n    for (let y = min + 1; y < max; y++) {\n      if (!this.board.getCell(this.x, y).isEmpty()) {\n        return false;\n      }\n    }\n    return true;\n  }\n  isEmptyHorizontal(target) {\n    if (this.y !== target.y) {\n      return false;\n    }\n    const min = Math.min(this.x, target.x);\n    const max = Math.max(this.x, target.x);\n    for (let x = min + 1; x < max; x++) {\n      if (!this.board.getCell(x, this.y).isEmpty()) {\n        return false;\n      }\n    }\n    return true;\n  }\n  isEmptyDiagonal(target) {\n    const absX = Math.abs(target.x - this.x);\n    const absY = Math.abs(target.y - this.y);\n    if (absY !== absX) return false;\n    const dy = this.y < target.y ? 1 : -1;\n    const dx = this.x < target.x ? 1 : -1;\n    for (let i = 1; i < absY; i++) {\n      if (!this.board.getCell(this.x + dx * i, this.y + dy * i).isEmpty()) return false;\n    }\n    return true;\n  }\n  setFigure(figure) {\n    this.figure = figure;\n    this.figure.cell = this;\n  }\n  moveFigure(target) {\n    var _this$figure2;\n    if (this.figure && (_this$figure2 = this.figure) !== null && _this$figure2 !== void 0 && _this$figure2.canMove(target)) {\n      this.figure.moveFigure(target);\n      target.setFigure(this.figure);\n      this.figure = null;\n    }\n  }\n}","map":{"version":3,"names":["Cell","constructor","board","x","y","color","figure","available","id","Math","random","isEmpty","isEnemy","target","_this$figure","isEmptyVertical","min","max","getCell","isEmptyHorizontal","isEmptyDiagonal","absX","abs","absY","dy","dx","i","setFigure","cell","moveFigure","_this$figure2","canMove"],"sources":["/home/liza/Рабочий стол/chess-game/chess-app/src/models/Cell.ts"],"sourcesContent":["import { Colors } from \"./Colors\";\nimport { Figure } from \"./figures/Figure\";\nimport { Board } from \"./Board\";\n\nexport class Cell {\n\n    readonly x: number;\n    readonly y: number;\n    readonly color: Colors;\n    figure: Figure | null;\n    board: Board;\n    available: boolean;\n    id: number;\n\n    constructor(board: Board, x: number, y: number, color: Colors, figure: Figure | null) {\n        this.x = x;\n        this.y = y;\n        this.color = color;\n        this.figure = figure;\n        this.board = board;\n        this.available = false;\n        this.id = Math.random()\n    }\n\n    isEmpty(): boolean{\n        return this.figure === null;\n    }\n\n    isEnemy(target: Cell): boolean {\n        if (target.figure) {\n            return this.figure?.color !== target.figure.color;\n        }\n        return false;\n    }\n\n    isEmptyVertical(target: Cell): boolean {\n        if(this.x !== target.x) {\n            return false;\n        }\n\n        const min = Math.min(this.y, target.y);\n        const max = Math.max(this.y, target.y);\n        for (let y = min+1; y < max; y++) {\n            if(!this.board.getCell(this.x, y).isEmpty()) {\n                return false\n            }\n        }\n        return true;\n    }\n\n    isEmptyHorizontal(target: Cell): boolean {\n        if(this.y !== target.y) {\n            return false;\n        }\n\n        const min = Math.min(this.x, target.x);\n        const max = Math.max(this.x, target.x);\n        for (let x = min+1; x < max; x++) {\n            if(!this.board.getCell(x, this.y).isEmpty()) {\n                return false\n            }\n        }\n        return true;\n    }\n    \n    isEmptyDiagonal(target: Cell): boolean {\n        const absX = Math.abs(target.x - this.x);\n        const absY = Math.abs(target.y - this.y);\n        if(absY !== absX)\n            return false;\n\n        const dy = this.y < target.y ? 1 : -1\n        const dx = this.x < target.x ? 1 : -1\n\n        for (let i = 1; i < absY; i++) {\n            if(!this.board.getCell(this.x + dx * i, this.y + dy * i).isEmpty())\n            return false;\n        }\n        return true;\n    }\n\n    setFigure(figure: Figure){\n        this.figure = figure;\n        this.figure.cell = this;\n    }\n\n    moveFigure(target: Cell) {\n        if(this.figure && this.figure?.canMove(target)){\n            this.figure.moveFigure(target)\n            target.setFigure(this.figure);\n            this.figure = null;\n        }\n    }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}